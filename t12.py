# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'customization.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from helper import ExtendedTextBox,BoxStyle,run_query,where_function\
,show_success_message,show_error_message,data_label_format,MySplashScreen,collect_data
from customization_widgets import GraphWidget
import PIL
from PIL import Image
from TopBar import TopLearningSection
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *

BoxStyle._style_list["ext"] = ExtendedTextBox

class LoadThread(QtCore.QThread):
    signal = QtCore.pyqtSignal()

    def __init__(self):
        QtCore.QThread.__init__(self)

    # run method gets called when we start the thread
    def run(self):
        import time
        time.sleep(1)
        self.signal.emit()

class Customization(object):
    
    def __init__(self,df=None,db_name=None,fields=None,kind=None,title=None,sql_func=None,graph_func=None,
                    selection_character=None,selection_numbers=None,selection_dates=None,
                    range_character=None,range_date=None,range_number=None,sql_data=None):
        self.db_name = db_name
        self.df = df
        self.fields = fields
        self.kind = kind
        self.title = title
        self.sql_func = sql_func
        self.graph_func = graph_func
        self.selection_characters = selection_character
        self.selection_numbers = selection_numbers
        self.selection_dates = selection_dates
        self.customization = {}
        self.range_character = range_character
        self.range_number = range_number
        self.range_date = range_date
        self.customization_features = []
        self.customization_functions = []
        self.cust_btn = {}
        self.sql_data = sql_data
        

    def setupUi(self, MainWindow):
        self.splash = MySplashScreen(QtGui.QPixmap('logo1.png'))

        self.vboxmain = QVBoxLayout()
        MainWindow.setLayout(self.vboxmain)

        self.horizontalGroupBox = QFrame()
        # self.horizontalGroupBox.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.vboxmain.addWidget(self.horizontalGroupBox)

        self.widgetheading = QWidget()
        self.widgetheadinglayout = QVBoxLayout()
        self.widgetheading.setLayout(self.widgetheadinglayout)
        self.widgetheading.setStyleSheet("background:blue")
        
        x_1 = TopLearningSection()
        x_1.setup(self.widgetheadinglayout)

        self.scrollbuttonmlayout = QVBoxLayout()
        self.widgetscrollbutton = QWidget()
        # self.widgetscrollbutton.setStyleSheet("background:#F8F8F8")

        self.scrollAreab = QtWidgets.QScrollArea()
        # self.scrollArea.setGeometry(QtCore.QRect(0, 0, MainWindow.width(), MainWindow.height()))
        self.scrollAreab.setWidgetResizable(True)
        self.scrollAreab.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.scrollAreaWidgetContentsb = QtWidgets.QWidget()

        ## vertical layout for scroll buttons
        self.scrollbuttonverticallayout = QVBoxLayout()
        self.scrollbuttonverticallayout.setAlignment(Qt.AlignTop)
        self.scrollAreaWidgetContentsb.setLayout(self.scrollbuttonverticallayout)

        self.scrollAreab.setWidget(self.scrollAreaWidgetContentsb)
        
        self.scrollbuttonmlayout.addWidget(self.scrollAreab)
        self.widgetscrollbutton.setLayout(self.scrollbuttonmlayout)

        self.hboxtop = QHBoxLayout()
        self.hboxtop.setAlignment(Qt.AlignCenter)
        self.top = QWidget()
        self.top.setLayout(self.hboxtop)
        # self.hboxtop.addStretch(1)
        self.top.setStyleSheet("background:pink")

        self.graphmlayout = QVBoxLayout()
        self.graph = QWidget()
        self.graph.setStyleSheet("background:green")

        self.scrollAreag = QtWidgets.QScrollArea()
        # self.scrollArea.setGeometry(QtCore.QRect(0, 0, MainWindow.width(), MainWindow.height()))
        self.scrollAreag.setWidgetResizable(True)
        self.scrollAreaWidgetContentsg = QtWidgets.QWidget()

        ## vertical layout for graph
        self.graphverticallayout = QVBoxLayout()
        self.graphverticallayout.setAlignment(Qt.AlignCenter)
        self.scrollAreaWidgetContentsg.setLayout(self.graphverticallayout)

        self.scrollAreag.setWidget(self.scrollAreaWidgetContentsg)
        
        self.scrollbuttonmlayout.addWidget(self.scrollAreab)
        self.graph.setLayout(self.graphmlayout)    



        
        layout = QGridLayout()
        # layout.setContentsMargins(0,0,0,0)
        # layout.setSpacing(0)
        layout.setColumnStretch(0, 1)
        layout.setColumnStretch(1, 4)

        
        layout.setRowStretch(0, 1)
        layout.setRowStretch(1, 2)
        layout.setRowStretch(2, 10)

        
        layout.addWidget(self.widgetheading,0,0,0,0) #1st row 1st column expand to 2nd row 2nd column  ##if we place 0 in expand it will expand full
        layout.addWidget(self.widgetscrollbutton,1,0,2,2)
        layout.addWidget(self.top,1,1,2,1)
        layout.addWidget(self.graph,2,1,2,1)

        self.horizontalGroupBox.setLayout(layout)

        # self.scrollArea = QtWidgets.QScrollArea(MainWindow)
        # self.scrollArea.setGeometry(QtCore.QRect(0, 0, MainWindow.width(), MainWindow.height()))
        # self.scrollArea.setWidgetResizable(True)
        # self.scrollArea.setObjectName("scrollArea")
        # self.scrollAreaWidgetContents = QtWidgets.QWidget()
        # # x_1 = TopLearningSection()
        # # x_1.setup1(self.scrollAreaWidgetContents)

        # self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1239, 739))
        # self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        # self.scrollArea.setStyleSheet('''QScrollArea {background: #fff}
        #         QFrame {background: #fff}
        #         QPushButton
        #         {
        #             border-radius: 5px;
        #             color: black;
        #             background-color: #DFDFDF;
                  
        #         }
        #         QPushButton:hover
        #         {
        #             background: #6e98e0;
        #             color: white;
                    
        #         }
        #         ''') 
        self.save_png_btn = QtWidgets.QPushButton(self.top)
        # background-color: #7969E6;5041AC
        self.save_png_btn.setStyleSheet('''
                QPushButton
                {
                    border-radius: 5px;
                    color: white;
                    background-color: #5041AC;

                  
                }
                QPushButton:hover
                {
                    background: #6e98e0;
                    color: white;
                    
                }
        ''') 
        # 186AFF
        # self.save_png_btn.setGeometry(QtCore.QRect(1055, 15, 151, 35))
        self.save_png_btn.setText('Export PNG')
        self.hboxtop.addWidget(self.save_png_btn)
        self.save_png_btn.clicked.connect(self.save_graph_image)
        self.save_png_btn.setFixedSize(151, 35)
        
        self.save_png_btn1 = QtWidgets.QPushButton(self.top)
        self.hboxtop.addWidget(self.save_png_btn1)
        # background-color: #7969E6;5041AC
        self.save_png_btn1.setStyleSheet('''
                QPushButton
                {
                    border-radius: 5px;
                    color: white;
                    background-color: #5041AC;

                  
                }
                QPushButton:hover
                {
                    background: #6e98e0;
                    color: white;
                    
                }
        ''') 
        # 186AFF
        # self.save_png_btn1.setGeometry(QtCore.QRect(855, 15, 151, 35))
        self.save_png_btn1.setText('Publish/Share')
        self.save_png_btn1.setFixedSize(151, 35)
        # self.save_png_btn1.clicked.connect(self.save_graph_image)

        self.frame = QtWidgets.QFrame()
        self.frame.setGeometry(QtCore.QRect(259, 60, 951, 681))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.graphverticallayout.addWidget(self.frame)

        self.custom_btn = QtWidgets.QPushButton()
        self.scrollbuttonverticallayout.addWidget(self.custom_btn)
        self.custom_btn.setFixedSize(151, 41)
        # self.custom_btn.setGeometry(QtCore.QRect(30, 60, 151, 41))
        self.custom_btn.setObjectName("pushButton")
        self.custom_btn.setStyleSheet('''QPushButton
                {
                    border-radius: 5px;
                    color: black;
                    background-color: #A4A4A4;
                  
                }
                QPushButton:hover
                {
                    background: #6e98e0;
                    color: white;
                    
                }''')
        # self.scrollArea.setWidget()
        self.create_dynamic_buttons()
        
        try:
            self.custom_btn.clicked.connect(self.customization_functions[0])
        except:
            pass
        self.create_graph()
        self.get_cutomization_options()
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle( "VizPick")
        MainWindow.setWindowIcon(QtGui.QIcon('logo1.png'))
        # MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.custom_btn.setText(_translate("MainWindow", "Customize All"))
        

    def is_paid_user(self):
        sql_query = f'''
                select * from user_info
            '''
        data = run_query(sql_query)
        if data['package'][0] !=  "Free":
            return True
        else:
            return False
        
    def create_dynamic_buttons(self):
        sql_query = f'''
            select distinct b.customization_key, b.formatted_name
            from function_customization a
            inner join customization_order b on a.customization_key=b.customization_key
            where a.function='{self.graph_func.__name__}'
            order by b.ordering
        '''
        data = run_query(sql_query)
        print(data)
        self.customization_features = data['customization_key'].tolist()
        print('###################FEATURES ################################')
        print(self.customization_features)
        y_axis = 120
        key_values= data['customization_key'].values
        print(key_values)
        if self.is_paid_user():
            if 'gradient' in key_values:
                data.loc[len(data)] = ['gradient_paid_color','Paid Color']
            elif 'above_color' in key_values:
                data.loc[len(data)] = ['above_color_paid_color','Paid Color']
            elif 'color_pallete' in key_values:
                data.loc[len(data)] = ['color_pallete_paid_color','Paid Color']
            elif 'single_color' in key_values:
                 data.loc[len(data)] = ['single_color_paid_color','Paid Color']
        data.loc[len(data)] = ['paid_color_title','Paid Color Titles']
        for index,row in data.iterrows():
            try:
                btn_func = getattr(self,'update_'+ str(row['customization_key']))
                self.customization_functions.append(btn_func)  
                if row['customization_key'] not in ['data_label_type','data_label_format','data_label_decimal','data_label_degree','legend_placement','orientation'
                                                    ,'data_label_decimal_total','data_label_format_total','data_label_degree_total','data_label_type_total','data_label_format_percent',
                                                    'data_label_decimal_percent','data_label_degree_percent','data_label_type_percent','data_label_format_axis',
                                                    'data_label_decimal_axis','data_label_type_axis','data_label_degree_axis']:    
                    self.cust_btn[index] = QtWidgets.QPushButton()
                    self.cust_btn[index].setFixedSize(151, 411)
                    self.scrollbuttonverticallayout.addWidget(self.cust_btn[index])
                    # self.cust_btn[index].setGeometry(QtCore.QRect(30, y_axis, 151, 41))
                    self.cust_btn[index].setText(row['formatted_name'])
                    self.cust_btn[index].clicked.connect(btn_func)
                    # y_axis += 60
            except Exception as e:
                print('############################ ERROR ON CUSTOMIZATION #########################')
                self.customization_features.remove(row['customization_key'])
                print(e)

            

    def update_paid_color_title(self):
        key = 'title_background'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''

        options = run_query(sql_query)
        self.Select = QtWidgets.QWidget()
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Update Above Below Color',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.update_title_color_paid)
        self.thread.start()
        
    def update_gradient_paid_color(self):
        key = 'gradient'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''

        options = run_query(sql_query)
        self.Select = QtWidgets.QWidget()
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Update Gradient Color',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.update_gradient_paid_color)
        self.thread.start()

    def update_above_color_paid_color(self):
        key = 'above_color'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''

        options = run_query(sql_query)
        self.Select = QtWidgets.QWidget()
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Update Above Below Color',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.update_above_color_paid_color)
        self.thread.start()


    def update_color_pallete_paid_color(self):
        key = 'color_palette'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Update Color Pallete',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()  
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.update_color_pallete_paid)
        self.thread.start()

    def single_color_paid_color(self):
        pass

    def update_title(self):
        self.Select = QtWidgets.QWidget()
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Update Graph Title','title',self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,None,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_title_text)
        self.thread.start()
        

    def update_x_label(self):
        self.Select = QtWidgets.QWidget()
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Edit your X-Label','x_label',self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,None,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_title_text)
        self.thread.start()
        

    def update_y_label(self):
        self.Select = QtWidgets.QWidget()
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Edit your Y-Label','y_label',self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,None,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_title_text)
        self.thread.start()

    def update_y_on(self):
        print("This is y axis is pushed")
        key = 'y_on'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''

        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Y Axis Customization',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()     
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_y_choices)
        self.thread.start()

    def update_legend(self):
        key = 'legend'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''

        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Legend Customization',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()  
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_legend)
        self.thread.start()


    def update_orientation(self):
        key = 'orientation'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''

        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Legend orientation',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_legend)
        self.thread.start()


    def update_legend_placement(self):
        key = 'legend_placement'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''

        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Legend Placement',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()        
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_legend)
        self.thread.start()

    def update_title_background(self):
        key = 'title_background'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose a Color option ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_title_color)
        self.thread.start()
    
    def update_data_label_degree_axis(self):
        key = 'data_label_degree_axis'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose a  data label degree axis ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()       
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()
    
    def update_data_label_degree_percent(self):
        key = 'data_label_degree_percent'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose a  data label degree percent ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()       
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()
    
    def update_data_label_degree_total(self):
        key = 'data_label_degree_total'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose a  data label degree total ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()       
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()
    
    def update_data_label_degree(self):
        key = 'data_label_degree'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose a  data label degree ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()       
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_data_label_frequency(self):
        key = 'data_label_frequency'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose a  frequency formatting option ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()       
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()


    def update_data_label_frequency_total(self):
        key = 'data_label_frequency_total'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose data label frequency total ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_data_label_type_total(self):
        key = 'data_label_type_total'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose data label type total ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()
        

    def update_data_label_format_percent(self):
        key = 'data_label_format_percent'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose data label format percent ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()               
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()


    def update_data_label_frequency_percent(self):
        key = 'data_label_frequency_percent'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose data_label_frequency_percent ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_data_label_decimal_percent(self):
        key = 'data_label_decimal_percent'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose data_label_decimal_percentt ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_data_label_type_percent(self):
        key = 'data_label_type_percent'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose data_label_type_percent ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()


    def update_data_label_format_total(self):
        key = 'data_label_format_total'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose data label format total ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_data_label_decimal_total(self):
        key = 'data_label_decimal_total'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose data_label_decimal_total',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_data_label_frequency_axis(self):
        key = 'data_label_frequency_axis'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose data label frequency axis ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_data_label_decimal_axis(self):
        key = 'data_label_decimal_axis'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose a data label decimal axis',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()
        

    def update_data_label_type_axis(self):
        key = 'data_label_type_axis'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose a data label type axis',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    def update_data_label_format_axis(self):
        key = 'data_label_format_axis'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose a data label format axis',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()


    def update_data_label_format(self):
        key = 'data_label_format'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose a format formatting option ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    
    def update_data_label_decimal(self):
        key = 'data_label_decimal'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose a decimal formatting option ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()


    def update_data_label_type(self):
        key = 'data_label_type'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose a type formatting option ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_data_label_format)
        self.thread.start()

    
    def update_gradient(self):
        key = 'gradient'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose a type formatting option ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_gradient)
        self.thread.start()


    def update_above_color(self):
        key = 'above_color'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose a type formatting option ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_above_below_color)
        self.thread.start()


    def update_color_pallete(self):
        key = 'color_palette'
        self.Select = QtWidgets.QWidget()
        sql_query = f'''
            select distinct a.option, a.description, a.sub_description
            from customization_options a
            where customization_key='{key}'
        '''
        options = run_query(sql_query)
        self.ui = GraphWidget(self.splash,self.sql_data,self.customization,'Choose a type formatting option ',key,self.graph_func,self.sql_func,self.kind,self.fields,
                                self.selection_characters,self.selection_dates,self.selection_numbers,
                                self.range_character,self.range_number,self.range_date,options,self.create_graph,self.customization_features,
                                self.customization_functions)
        self.ui.setupUi(self.Select)
        self.Select.show()
        self.splash.show()  
        self.thread = LoadThread()
        self.thread.signal.connect(self.ui.generate_color_pallete)
        self.thread.start()


    def get_cutomization_options(self):
        sql_query = f'''
            select * from customization_options;
        '''
        self.customization_options = run_query(sql_query)

    def get_concat_v(self,im1, im2):
        '''
            This function is resonsible for the stiching up the 2 images
        '''
        dst = Image.new('RGB', (im1.width, im1.height + im2.height))
        dst.paste(im1, (0, 0))
        dst.paste(im2, (0, im1.height))
        return dst

    def trans_paste(self,bg_img,fg_img,box=(758,0)):
        fg_img_trans = Image.new("RGBA",bg_img.size)
        fg_img_trans.paste(fg_img,box,mask=fg_img)
        new_img = Image.alpha_composite(bg_img,fg_img_trans)
        return new_img


    def save_graph_image(self):
        # open the directory dialogue
        try:
            fileName = str(QtWidgets.QFileDialog.getSaveFileName(None,"Select Directory"))
            ##check if file name is not empty
            print(type(fileName))
            fileName = fileName.split(',')[0].replace("'",'').replace('(','')
            print(fileName)
            if fileName and fileName != '':
                # save the figure
                self.ax1.get_figure().savefig(fileName+'.png',bbox_inches="tight", dpi=100)
                # list_im = ['Test1.jpg', 'Test2.jpg', 'Test3.jpg']
                # create a list aray
                # append to the first the image in the list
                img1 = PIL.Image.open(fileName+'.png')
                img2 = PIL.Image.open('wm.png')
                final2 = self.trans_paste(img1,img2)
                final2.save(fileName + '.png')
                #self.get_concat_v(imgs[0], imgs[1]).save(fileName+'.png')
                # show success message
                collect_data('za@za.com','PNG',self.graph_func.__name__)
                
                show_success_message('Successfully Save Image')
        except Exception as e:
            print(e)
            print('No File found')

    def create_graph(self):
        if not self.customization:
            self.parameter = self.sql_func(self.sql_data)
        else:
            self.parameter = self.sql_func(self.sql_data,customizations=self.customization)
        self.ax1,self.fig = self.graph_func(self.parameter,self.kind,self.fields)
        #from matplotlib import rcParams
        
        self.fig.subplots_adjust(left=0.1, right=0.9,
                                     bottom=0.2, top=0.95,
                                     hspace=0.2, wspace=0.2)
        self.canvas = FigureCanvas(self.fig)
        
        self.canvas.setParent(self.frame)
        # self.canvas.setGeometry(QtCore.QRect(0, 0, self.frame.width(), self.frame.height()))
        
        title = self.ax1.set_title(self.parameter['title'],
                                   backgroundcolor=self.parameter['title_background'], color=self.parameter['title_text_color'])
        bb = title.get_bbox_patch()
        # use the axes' width as width of the text box
        bb.set_boxstyle("ext", pad=1.2, width=self.canvas.width())
        
        self.canvas.show()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Customization()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
    